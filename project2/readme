
                +++++++++++++++
                ++ ΕΝΟΤΗΤΑ 1 ++     -Γενικά
                +++++++++++++++

---------------------------------------------------------- Γενικά ----------------------------------------------------------

--Ύλοποίηση στα linux της σχολής μέσω ssh από το vscode.

--Έχω υλοποιήσει όλες τις εντολές και όλα τα σήματα.

--Compile/run info:

            a) χρησιμοποιώντας το make.sh στον φάκελο programs ως εξής:

    -   chmod 777 make.sh
    -   ./make.sh               //compile
    -   ./make.sh run           //compile και run με predefined arguments
    -   ./make.sh clean         //clean τα object files και τα executables
    -   ./make.sh valgrind      //compile και run χρησιμοποιώντας valgrind

        ή   b) εκτελώντας τα 2 makefiles

    -   cd programs/monitor && make && cd ../travelMonitor && make
    -   ./travelMonitor -m numMonitors -b bufferSize -s sizeOfBloom -i input_dir


--Αρχεία:   |-->project2
                |-->include/
                |-->modules/
                |-->input_dir/
                |-->programs/
                    |-->create_infiles.sh
                    |-->make.sh
                    |-->travelMonitor/
                        |-->main.c
                        |-->Makefile
                        |-->log_files/                      //Όλα τα log files δημιουργούνται εδώ.
                    |-->monitor/
                        |-->main.c
                        |-->Makefile
                    |-->pipes/                              //Όλα τα fifos δημιουργούνται εδώ.
                |-->records
                |-->readme
----------------------------------------------------------------------------------------------------------------------------




                +++++++++++++++     -Οι εντολές χρήστη αναλυτικά
                ++ ΕΝΟΤΗΤΑ 2 ++     -Σχετικά με την 1η άσκηση - Προσθήκες και αλλαγές
                +++++++++++++++     -Υλοποίηση - Παραδοχές

----------------------------------------------------------------------------------------------------------------------------
------------------------------------------------ Οι εντολές χρήστη αναλυτικά -----------------------------------------------
----------------------------------------------------------------------------------------------------------------------------

1)  /travelRequest
Αρχικά χρησιμοποιώ το table_of_viruses το οποίο με pointers σε virus_tables κρατάει hash table τα οποία (όπως αναφέρω
και παρακάτω) χρησιμοποιούνται για να αποθηκεύουν δεδομένα για την travelStats (countryTo) και ενημερώνονται κάθε φορά που
παίρνω αποτέλεσμα ACCEPTED ή REJECTED.
Με βάση το countryFrom βρίσκω τους read και write fds των fifos για το σωστό monitor που διαχειρίζεται τη χώρα και ξεκινάει
η επικοινωνία. Αν δε βρεθεί το id ή ο ιός παίρνουμε αποτέλεσμα REJECTED. Αν βρεθούν περιμένουμε έναν ακέραιο 0-1 από το
monitor (found/not found) και συνεχίζουμε ανάλογα ελέγχοντας και τα dates που θα επιστρέψει στην περίπτωση του found.

2)  /travelStats
Εδώ απλά ψάχνουμε το virus_table που φτιάξαμε στην προηγούμενη με βάση τον ιό και απαντάμε αναλόγως και πάντα σύμφωνα με
το countryTo.

3)  /addVaccinationRecords
Βρίσκω τον σωστό pid του monitor που ασχολείται με τη δοσμένη χώρα και του στέλνω SIGUSER1. Το monitor καθαρίζει τις δομές
του και ξαναδιαβάζει τα αρχεία που του αντιστοιχούν, δημιουργώντας ξανά τις δομές και έχοντας τώρα αποθηκευμένο και το
προστεθέν αρχείο και όπως και στη διαδικασία αρχικοποίησης στέλνει πίσω τα bloom filters.

4)  /searchVaccinationStatus citizenID
Στέλνουμε σε όλα τα monitors το αίτημα, παίρνουμε πίσω 'numMonitors' 1/0 ανάλογα αν βρήκαν ή όχι το id. Σε έναν temp πίνακα
που έχουμε όλους τους fds μηδενίζουμε όσους επέστρεψαν 0. Ο ένας που δεν έχει μηδενιστεί είναι αυτό που θα χρησιμοποιήσουμε
επικοινωνία με το μοναδικό monitor που έχει τον citizen. Αν όλοι οι fds είναι 0, το id δεν υπάρχει.

5)  /exit ή SIGINT/SIGQUIT στο travelMonitor
Στέλνει ο travelMonitor SIGKILL στα monitor, τα περιμένει μέσω της waitpid και τερματίζει αφού εκτυπώσει το log file του
με ανακατεύθυνση του stdout.

6)  SIGINT/SIGQUIT σε monitor
Το monitor που λαμβάνει INT/QUIT από το terminal εκτυπώνει σε log file όπως και το travelMonitor στο 5) χωρίς όμως να 
τερματίζει.

7)  SIGKILL σε monitor
Δίνοντας αυτό το σήμα στο monitor από το terminal τερματίζει απότομα η διεργασία με το pid, ο πατέρας travelMonitor το
αντιλαμβάνεται από το SIGCHLD σήμα και φτιάχνει καινούριο monitor με τα δεδομένα του παλιού, χρησιμοποιώντας την ίδια fifo.

----------------------------------------------------------------------------------------------------------------------------
------------------------------------ Σχετικά με την 1η άσκηση - Προσθήκες και αλλαγές --------------------------------------
----------------------------------------------------------------------------------------------------------------------------

--Χρησιμοποίησα τον κώδικα της 1ης άσκησης όσον αφορά τις δομές συμπεριλαμβανομένων και των skip list.

--Πρόσθεσα στο filter_list.h (λίστα με τα bloom filters) τη συνάρτηση get_bloom_names() η οποία  επιστρέφει ένα pointer
(πίνακα) στα ονόματα των bloom filters (τα ονόματα των ιών δηλαδή) και τη num_bloom_filters() που επιστρέφει τον αριθμό 
των bloom filters/ιών.

--Έκανα τον bloom_array πίνακα από chars αντί για ints για δική μου διευκόλυνση.

--Πρόσθεσα στο bloom_filter.h τη συνάρτηση get_bloom_array(Bloom_filter) η οποία επιστρέφει ένα pointer στον πίνακα του
bloom filter για να τον μεταφέρω απ' το fifo.

--Προσθήκη της skip_lists_key(&count,key) η οποία χρησιμοποιείται απ' το monitor για να επιστρέψει αποκλειστικά ένα table
από pointers σε skip lists που περιέχουν το συγκεκριμένο κλειδί, ενώ ταυτόχρονα κρατάει τον αριθμό τους.

----------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------- Υλοποίηση - Παραδοχές --------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------

--Υπόθεση ότι ο buffer των pipe θα είναι μεγαλύτερος/ίσος από sizeof(int) ώστε να περαστεί τουλάχιστον το buffersize στους 
Monitors. Παρόλα αυτά δουλεύει κανονικά και με μικρότερο bufferSize απλά περνάω τους integers με sizeof(int).

--Όσον αφορά τη μεταφορά μέσω fifo ενημερώνω τον παραλήπτη πόσα bytes θα στείλω και μετά χρησιμοποιώ τη string_pipe στην
οποία το read γίνεται διαβάζοντας όσες φορές χρειάζεται bufferSize bytes και στο τέλος τα remaining bytes και το αντίστοιχο
για write.

--Όπως ειπώθηκε και στο piazza τα σήματα έρχονται σε idle καταστάσεις οπότε ελέγχω ουσιαστικά στην fgets του travelMonitor
(όπου το travelMonitor περιμένει εντολή από τον χρήστη) και στη read στο monitor (όπου το monitor περιμένει να διαβάσει το
μέγεθος της εντολής από το travelMonitor).

--Το country της /travelStats αναφέρεται στο countryTo απ' τη /travelRequest και δεν είναι απαραίτητο να ανήκει στις χώρες 
του input_dir. Με τη λογική αυτή κρατάω όλα τα request σε hash tables τα λεγόμενα virus_table τα οποία είναι ένα για κάθε
ιό και κρατάνε τις χώρες τα αποτελέσματα των requests και τις ημερομηνίες. Μέσα στη main με realloc κρατάω όλους τους
pointers σε αυτά τα virus_table.

--Αν τα monitors είναι περισσότερα των countries, εξισώνω τον αριθμό τους με τις χώρες πριν κάνω fork.
----------------------------------------------------------------------------------------------------------------------------




--------------------------------------- Τα παρακάτω δε χρειάζονται για την κατανόηση ---------------------------------------

                +++++++++++++++
                ++ ΕΝΟΤΗΤΑ 3 ++     -Ενδεικτικές εκτελέσεις
                +++++++++++++++

---------------------------------------- Ενδεικτικές εκτελέσεις για τον my_input_dir ---------------------------------------

1)
-test
/travelRequest 3989 30-06-1999 Peru Germany SARS-CoV        (ACCEPTED)
/travelRequest 3989 01-01-2000 Peru Germany SARS-CoV        (REJECTED)

/travelRequest 6821 24-10-1992 Mexico Greece Tetanus        (ACCEPTED)
/travelRequest 6821 25-04-1993 Mexico Greece Tetanus        (REJECTED)

/travelRequest 4287 01-12-1996 Spain Greece Influenza       (ACCEPTED)
/travelRequest 4287 02-06-2005 Spain Greece Influenza       (REJECTED)


/travelRequest 8888 30-06-1999 India Germany Measles        (REJECTED - not found)
/travelRequest 7777 30-06-1999 India Germany Flu            (REJECTED - not found)


/travelRequest 8882 30-06-1999 Turkey Germany Tetanus

2)
/travelStats SARS-CoV 11-02-1990 11-06-2015 Germany
/travelStats SARS-CoV 11-02-1990 11-06-2015
/travelStats Tetanus 11-02-1992 11-06-2015 Greece
/travelStats Tetanus 11-02-1990 11-06-2015


3)
/addVaccinationRecords India                    (Προσθήκη έξτρα αρχείου India-x.txt στον φάκελο India με ids 8888,7777.)

/travelRequest 8888 30-06-1999 India Germany Measles        (ACCEPTED)
/travelRequest 7777 30-06-2018 India Germany Flu            (ACCEPTED)

4)
/searchVaccinationStatus 0906
+ 0906 Bkl mSI Argentina 79 SARS-CoV NO
+ 0906 Bkl mSI Argentina 79 Ebola YES 16-10-2002
+ 0906 Bkl mSI Argentina 79 Influenza YES 13-03-2015

----------------------------------------------------------------------------------------------------------------------------